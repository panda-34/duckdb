# name: test/sql/json/json_nested_casts.test
# description: Casts to and from nested types with JSON
# group: [json]

require json

statement ok
PRAGMA enable_verification

# list with varchar to json
statement ok
create table t2(blobs json[])

statement ok
insert into t2 values(json('[1,2]'));

query I
SELECT * FROM t2
----
[1, 2]

# varchar to list of json
query I
select cast(json('[1,2]') as json[]);
----
[1, 2]

statement error
select cast(['boom'] as json[]);
----
Malformed JSON

query I
select cast(['[1, 2]', '[3, 4]'] as json[]);
----
[[1, 2], [3, 4]]

# struct with varchar to json
query I
SELECT {'a': '[1, 2]'}::ROW(a JSON)
----
{'a': [1, 2]}

query I
SELECT {'a': 42, 'b': '[1, 2]'}::ROW(a JSON, b JSON)
----
{'a': 42, 'b': [1, 2]}

query I
SELECT {'a': 42, 'b': '[1, 2]'}::ROW(a JSON, b INT[])
----
{'a': 42, 'b': [1, 2]}

statement error
SELECT {'a': 'boom', 'b': '[1, 2]'}::ROW(a JSON, b INT[])
----
Malformed JSON

# varchar to struct of json
query I
SELECT '{a: [1, 2]}'::ROW(a JSON)
----
{'a': [1, 2]}

# map with varchar to json
query I
SELECT MAP(['42'], ['88'])::MAP(JSON, JSON)
----
{42=88}

# varchar to map of json
query I
SELECT '{42=88}'::MAP(JSON, JSON)
----
{42=88}

# varchar to union with json
query I
SELECT '42'::UNION(u JSON)
----
42

# union with varchar to union with json
query I
SELECT '42'::UNION(u VARCHAR)::UNION(u JSON)
----
42

query I
SELECT ['42']::UNION(u JSON)[]
----
[42]

query I
SELECT '42'::UNION(u VARCHAR)::JSON
----
42
