blob = Value::BLOB(R"'(\x0A\x00)'");
REQUIRE(Variant(false) == blob);
blob = Value::BLOB(R"'(\x0B\x88)'");
REQUIRE(Variant<int8_t>(-120) == blob);
blob = Value::BLOB(R"'(\x1C\xFE)'");
REQUIRE(Variant<uint8_t>(254) == blob);
blob = Value::BLOB(R"'(\x0C\x00\x83)'");
REQUIRE(Variant<int16_t>(-32000) == blob);
blob = Value::BLOB(R"'(\x1D\xE8\xFD)'");
REQUIRE(Variant<uint16_t>(65000) == blob);
blob = Value::BLOB(R"'(\x0D\x18\x02\xFF\xFF)'");
REQUIRE(Variant<int32_t>(-65000) == blob);
blob = Value::BLOB(R"'(\x1E\x01\x00\x00\x80)'");
REQUIRE(Variant<uint32_t>(0x80000001) == blob);
blob = Value::BLOB(R"'(\x0E\xFE\xFF\xFF\xFF\xFF\xFF\xFF\xFF)'");
REQUIRE(Variant<int64_t>(-2) == blob);
blob = Value::BLOB(R"'(\x1F\x01\xF0\x00\x00\xFF\xFF\x00\x80)'");
REQUIRE(Variant<uint64_t>(0x8000FFFF0000F001) == blob);
blob = Value::BLOB(R"'(2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80)'");
REQUIRE(Variant(huge_val) == blob);
blob = Value::BLOB(R"'(\x16\xC3\xF5H@)'");
REQUIRE(Variant(3.14f) == blob);
blob = Value::BLOB(R"'(\x17\x1F\x85\xEBQ\xB8\x1E\x09@)'");
REQUIRE(Variant(3.14) == blob);
blob = Value::BLOB(R"'(\x0F0J\x00\x00)'");
REQUIRE(Variant(Date::FromDate(2021, 12, 31)) == blob);
blob = Value::BLOB(R"'(\x10\xC0\xFE\xDC-\x0E\x00\x00\x00)'");
REQUIRE(Variant(Time::FromTime(16, 54, 59)) == blob);
blob = Value::BLOB(R"'(\x13\xC0\xFE\xFE\x07t\xD4\x05\x00)'");
REQUIRE(Variant(ts) == blob);
blob = Value::BLOB(R"'(\x1B\x00\x00\x00\x00\x1A^\x00\x00\x80\xB1'\xBA\x05\x00\x00\x00)'");
REQUIRE(Variant(Interval::GetDifference(ts, Timestamp::FromString("1956-01-17 10:05:01"))) == blob);
blob = Value::BLOB(R"'(\x19)'");
REQUIRE(Variant("") == blob);
blob = Value::BLOB(R"'(\x19str)'");
REQUIRE(Variant("str") == blob);
blob = Value::BLOB(R"'(\x19Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. )'");
REQUIRE(Variant(string("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ")) == blob);
blob = Value::BLOB(R"'(\x0A\x01)'");
REQUIRE(Variant(Value::BOOLEAN(true)) == blob);
blob = Value::BLOB(R"'(\x0B\x88)'");
REQUIRE(Variant(Value::TINYINT(-120)) == blob);
blob = Value::BLOB(R"'(\x1C\xFE)'");
REQUIRE(Variant(Value::UTINYINT(254)) == blob);
blob = Value::BLOB(R"'(\x0C\x00\x83)'");
REQUIRE(Variant(Value::SMALLINT(-32000)) == blob);
blob = Value::BLOB(R"'(\x1D\xE8\xFD)'");
REQUIRE(Variant(Value::USMALLINT(65000)) == blob);
blob = Value::BLOB(R"'(\x0D\x18\x02\xFF\xFF)'");
REQUIRE(Variant(Value::INTEGER(-65000)) == blob);
blob = Value::BLOB(R"'(\x1E\x01\x00\x00\x80)'");
REQUIRE(Variant(Value::UINTEGER(0x80000001)) == blob);
blob = Value::BLOB(R"'(\x0E\xFE\xFF\xFF\xFF\xFF\xFF\xFF\xFF)'");
REQUIRE(Variant(Value::BIGINT(-2)) == blob);
blob = Value::BLOB(R"'(\x1F\x01\xF0\x00\x00\xFF\xFF\x00\x80)'");
REQUIRE(Variant(Value::UBIGINT(0x8000FFFF0000F001)) == blob);
blob = Value::BLOB(R"'(2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80)'");
REQUIRE(Variant(Value::HUGEINT(huge_val)) == blob);
blob = Value::BLOB(R"'(\x16\xC3\xF5H@)'");
REQUIRE(Variant(Value::FLOAT(3.14f)) == blob);
blob = Value::BLOB(R"'(\x17\x1F\x85\xEBQ\xB8\x1E\x09@)'");
REQUIRE(Variant(Value::DOUBLE(3.14)) == blob);
blob = Value::BLOB(R"'(\x0F0J\x00\x00)'");
REQUIRE(Variant(Value::DATE(2021, 12, 31)) == blob);
blob = Value::BLOB(R"'(\x10\xFF@\xEC-\x0E\x00\x00\x00)'");
REQUIRE(Variant(Value::TIME(16, 54, 59, 999999)) == blob);
blob = Value::BLOB(R"'("\xC0\xFE\xDC-\x0E\x00\x00\x00)'");
REQUIRE(Variant(Value::TIMETZ(Time::FromTime(16, 54, 59))) == blob);
blob = Value::BLOB(R"'(\x13\xC0\xFE\xFE\x07t\xD4\x05\x00)'");
REQUIRE(Variant(Value::TIMESTAMP(ts)) == blob);
blob = Value::BLOB(R"'( \xC0\xFE\xFE\x07t\xD4\x05\x00)'");
REQUIRE(Variant(Value::TIMESTAMPTZ(ts)) == blob);
blob = Value::BLOB(R"'(\x11\xE8\x03\x00\x00\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::TIMESTAMPSEC(timestamp_t(1000))) == blob);
blob = Value::BLOB(R"'(\x12@B\x0F\x00\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::TIMESTAMPMS(timestamp_t(1000000))) == blob);
blob = Value::BLOB(R"'(\x14\x00\x10\xA5\xD4\xE8\x00\x00\x00)'");
REQUIRE(Variant(Value::TIMESTAMPNS(timestamp_t(1000000000000))) == blob);
blob = Value::BLOB(R"'(\x1B\x0D\x00\x00\x00\x12\x00\x00\x00\x00\xE4\x0BT\x02\x00\x00\x00)'");
REQUIRE(Variant(Value::INTERVAL(13, 18, 10000000000)) == blob);
blob = Value::BLOB(R"'(4X\xB3\x03\xEEZ\x85\xD0\xA7)'");
REQUIRE(Variant(Value::HASH(Hash("Hash me"))) == blob);
blob = Value::BLOB(R"'(6\x91B\x0F\xD5\x9E\xAB\xFF\xB5\x10K?\x86\xEABe\xEB)'");
REQUIRE(Variant(Value::UUID("6b6542ea-863f-4b10-b5ff-ab9ed50f4291")) == blob);
blob = Value::BLOB(R"'(\x19)'");
REQUIRE(Variant(Value("")) == blob);
blob = Value::BLOB(R"'(\x19a string)'");
REQUIRE(Variant(Value("a string")) == blob);
blob = Value::BLOB(R"'(\x1Aa\x00blob)'");
REQUIRE(Variant(Value::BLOB((const uint8_t*)"a\0blob", 6)) == blob);
blob = Value::BLOB(R"'(\x15\x04\x03E\x0C)'");
REQUIRE(Variant(Value::DECIMAL(3141LL, 4, 3)) == blob);
blob = Value::BLOB(R"'(\x15\x09\x08\xA1\xB0\xB9\x12)'");
REQUIRE(Variant(Value::DECIMAL(314159265LL, 9, 8)) == blob);
blob = Value::BLOB(R"'(\x15\x12\x11\xFB\xA0\x9E\xF6/\x1E\x5C\x04)'");
REQUIRE(Variant(Value::DECIMAL(314159265358979323LL, 18, 17)) == blob);
blob = Value::BLOB(R"'(\x15 \x1F\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80)'");
REQUIRE(Variant(Value::DECIMAL(huge_val, 32, 31)) == blob);
blob = Value::BLOB(R"'(\x19three)'");
REQUIRE(Variant(Value::ENUM(2, tp_enum)) == blob);
blob = Value::BLOB(R"'(e\x01)'");
REQUIRE(Variant(Value::EMPTYLIST(LogicalType::SQLNULL)) == blob);
blob = Value::BLOB(R"'(e\x01\x01\x00\x00\x00\x01\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::SQLNULL, {nullptr})) == blob);
blob = Value::BLOB(R"'(e\x0A)'");
REQUIRE(Variant(Value::EMPTYLIST(LogicalType::BOOLEAN)) == blob);
blob = Value::BLOB(R"'(e\x0A\x04\x00\x00\x00\x04\x01\x00\x00\x01)'");
REQUIRE(Variant(Value::LIST(LogicalType::BOOLEAN, {true, false, nullptr, true})) == blob);
blob = Value::BLOB(R"'(e\x0B\x04\x00\x00\x00\x01\x00\x80\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::TINYINT, {nullptr, -128, 127, 0})) == blob);
blob = Value::BLOB(R"'(e\x1C\x05\x00\x00\x00\x10\x00\x80\xFF\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::UTINYINT, {0, 127, 128, 255, nullptr})) == blob);
blob = Value::BLOB(R"'(e\x0C\x03\x00\x00\x00\x02\x00\x80\x00\x00\xFF)'");
REQUIRE(Variant(Value::LIST(LogicalType::SMALLINT, {-32768, nullptr, 32767})) == blob);
blob = Value::BLOB(R"'(e\x1D\x01\x00\x00\x00\x00\xFF\xFF)'");
REQUIRE(Variant(Value::LIST(LogicalType::USMALLINT, {65535})) == blob);
blob = Value::BLOB(R"'(e\x0D\x0B\x00\x00\x00\x00\x02\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80)'");
REQUIRE(Variant(Value::LIST(LogicalType::INTEGER, {std::numeric_limits<int32_t>::max(), -1, 2, 3, 4, 5, 6, 7, 8, nullptr, std::numeric_limits<int32_t>::min()})) == blob);
blob = Value::BLOB(R"'(e\x1E\x01\x00\x00\x00\x00\x01\x00\x00\x80)'");
REQUIRE(Variant(Value::LIST(LogicalType::UINTEGER, {0x80000001LL})) == blob);
blob = Value::BLOB(R"'(e\x0E\x03\x00\x00\x00\x02\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80)'");
REQUIRE(Variant(Value::LIST(LogicalType::BIGINT, {std::numeric_limits<int64_t>::max(), nullptr, std::numeric_limits<int64_t>::min()})) == blob);
blob = Value::BLOB(R"'(e\x1F\x02\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\xC8\x00\x00\x00\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::UBIGINT, {Value::UBIGINT(100), Value::UBIGINT(200)})) == blob);
blob = Value::BLOB(R"'(e2\x03\x00\x00\x00\x04\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::HUGEINT, {Value::HUGEINT(huge_val), Value::HUGEINT(huge_val / 2), nullptr})) == blob);
blob = Value::BLOB(R"'(e\x16\x05\x00\x00\x00\x08\xC3\xF5H@\xA4p-@\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFF)'");
REQUIRE(Variant(Value::LIST(LogicalType::FLOAT, {3.14f, 2.71f, 0.0f, nullptr, std::numeric_limits<float>::max()})) == blob);
blob = Value::BLOB(R"'(e\x17\x05\x00\x00\x00\x08\x1F\x85\xEBQ\xB8\x1E\x09@\xAEG\xE1z\x14\xAE\x05@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF\xEF)'");
REQUIRE(Variant(Value::LIST(LogicalType::DOUBLE, {3.14, 2.71, 0.0, nullptr, std::numeric_limits<double>::max()})) == blob);
blob = Value::BLOB(R"'(e\x0F\x03\x00\x00\x00\x020J\x00\x00\x00\x00\x00\x001J\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::DATE, {Value::DATE(2021, 12, 31), nullptr, Value::DATE(2022, 1, 1)})) == blob);
blob = Value::BLOB(R"'(e\x10\x03\x00\x00\x00\x04\xFF@\xEC-\x0E\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::TIME, {Value::TIME(16, 54, 59, 999999), Value::TIME(0, 0, 0, 0), nullptr})) == blob);
blob = Value::BLOB(R"'(e"\x03\x00\x00\x00\x04\xFF@\xEC-\x0E\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::TIME_TZ, {Value::TIME(16, 54, 59, 999999), Value::TIME(0, 0, 0, 0), nullptr})) == blob);
blob = Value::BLOB(R"'(e\x13\x03\x00\x00\x00\x02\xC0\xFE\xFE\x07t\xD4\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\xC0\x9EqV\x8C\xDD\x05\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::TIMESTAMP, vts)) == blob);
blob = Value::BLOB(R"'(e \x03\x00\x00\x00\x02\xC0\xFE\xFE\x07t\xD4\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\xC0\x9EqV\x8C\xDD\x05\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::TIMESTAMP_TZ, vts)) == blob);
blob = Value::BLOB(R"'(e\x11\x03\x00\x00\x00\x02\xE35\xCFa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00c\xCCgb\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::TIMESTAMP_S, vts)) == blob);
blob = Value::BLOB(R"'(e\x12\x03\x00\x00\x00\x02\xB8~j\x11~\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB8bve\x80\x01\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::TIMESTAMP_MS, vts)) == blob);
blob = Value::BLOB(R"'(e\x14\x03\x00\x00\x00\x02\x00\x1E\x13<?\xE5\xC5\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1E\xD4\xAB1l\xE9\x16)'");
REQUIRE(Variant(Value::LIST(LogicalType::TIMESTAMP_NS, vts)) == blob);
blob = Value::BLOB(R"'(e\x1B\x03\x00\x00\x00\x02\x0D\x00\x00\x00\x12\x00\x00\x00\x00\xE4\x0BT\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x82\x00\x00\x00\x01\x00\x00\x00\x80\x96\x98\x00\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::INTERVAL, {Value::INTERVAL(13, 18, 10000000000), nullptr, Value::INTERVAL(130, 1, 10000000)})) == blob);
blob = Value::BLOB(R"'(e4\x03\x00\x00\x00\x02X\xB3\x03\xEEZ\x85\xD0\xA7\x00\x00\x00\x00\x00\x00\x00\x00\xD3C\xFF\x98j\x80\xE5\x5C)'");
REQUIRE(Variant(Value::LIST(LogicalType::HASH, {Value::HASH(Hash("Hash me")), nullptr, Value::HASH(Hash("Hash me too"))})) == blob);
blob = Value::BLOB(R"'(e6\x03\x00\x00\x00\x02\x91B\x0F\xD5\x9E\xAB\xFF\xB5\x10K?\x86\xEABe\xEB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x12\xACB\x02\xD6\x90\xEC\x11~m\x00i\xB6\xB3)'");
REQUIRE(Variant(Value::LIST(LogicalType::UUID, {Value::UUID("6b6542ea-863f-4b10-b5ff-ab9ed50f4291"), nullptr, Value::UUID("33b66900-6d7e-11ec-90d6-0242ac120003")})) == blob);
blob = Value::BLOB(R"'(e\x15\x04\x03\x03\x00\x00\x00\x02E\x0C\x00\x00\xFF\xFF)'");
REQUIRE(Variant(Value::LIST(LogicalType::DECIMAL(4, 3), {Value::DECIMAL(3141LL, 4, 3), nullptr, Value::DECIMAL(65535LL, 4, 3)})) == blob);
blob = Value::BLOB(R"'(e\x15\x09\x08\x03\x00\x00\x00\x02\xA1\xB0\xB9\x12\x00\x00\x00\x00\x01\x00\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::DECIMAL(9, 8), {Value::DECIMAL(314159265LL, 9, 8), nullptr, Value::DECIMAL(1LL, 9, 8)})) == blob);
blob = Value::BLOB(R"'(e\x15\x12\x11\x03\x00\x00\x00\x02\xFB\xA0\x9E\xF6/\x1E\x5C\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::DECIMAL(18, 17), {Value::DECIMAL(314159265358979323LL, 18, 17), nullptr, Value::DECIMAL(1LL, 18, 17)})) == blob);
blob = Value::BLOB(R"'(e\x15 \x1F\x03\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::DECIMAL(32, 31), {Value::DECIMAL(huge_val, 32, 31), nullptr, Value::DECIMAL(1LL, 32, 31)})) == blob);
blob = Value::BLOB(R"'(e\x19)'");
REQUIRE(Variant(Value::EMPTYLIST(LogicalType::VARCHAR)) == blob);
blob = Value::BLOB(R"'(e\x19\x03\x00\x00\x00\x02\x10\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00a string)'");
REQUIRE(Variant(Value::LIST(LogicalType::VARCHAR, {"", nullptr, "a string"})) == blob);
blob = Value::BLOB(R"'(e\x1A\x04\x00\x00\x00\x02\x14\x00\x00\x00\x1A\x00\x00\x00\x1A\x00\x00\x00\x1A\x00\x00\x00 \x00\x00\x00a\x00bloba blob)'");
REQUIRE(Variant(Value::LIST(LogicalType::BLOB, {Value::BLOB((const uint8_t*)"a\0blob", 6), nullptr, "", "a blob"})) == blob);
blob = Value::BLOB(R"'(e\x19\x04\x00\x00\x00\x02\x14\x00\x00\x00\x17\x00\x00\x00\x17\x00\x00\x00\x1A\x00\x00\x00\x1F\x00\x00\x00onetwothree)'");
REQUIRE(Variant(Value::LIST(tp_enum, {Value::ENUM(0, tp_enum), nullptr, Value::ENUM(1, tp_enum), Value::ENUM(2, tp_enum)})) == blob);
blob = Value::BLOB(R"'(ee\x0C\x05\x00\x00\x00\x04\x18\x00\x00\x00%\x00\x00\x000\x00\x00\x000\x00\x00\x000\x00\x00\x007\x00\x00\x00\x04\x00\x00\x00\x08\x01\x00\x02\x00\x03\x00\x00\x00\x03\x00\x00\x00\x00\x04\x00\x05\x00\x06\x00\x01\x00\x00\x00\x00\x01\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::LIST(LogicalType::SMALLINT), { Value::LIST(LogicalType::SMALLINT, {1, 2, 3, nullptr}), Value::LIST(LogicalType::SMALLINT, {4, 5, 6}), nullptr, Value::LIST(LogicalType::SMALLINT, {}), Value::LIST(LogicalType::SMALLINT, {1})})) == blob);
blob = Value::BLOB(R"'(ee\x19\x05\x00\x00\x00\x04\x18\x00\x00\x00:\x00\x00\x00U\x00\x00\x00U\x00\x00\x00U\x00\x00\x00f\x00\x00\x00\x04\x00\x00\x00\x08\x14\x00\x00\x00\x15\x00\x00\x00\x18\x00\x00\x00\x1D\x00\x00\x00\x1D\x00\x00\x00abbbcdefg\x03\x00\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x13\x00\x00\x00\x16\x00\x00\x00hijklm\x02\x00\x00\x00\x00\x0C\x00\x00\x00\x0C\x00\x00\x00\x0C\x00\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::LIST(LogicalType::VARCHAR), { Value::LIST(LogicalType::VARCHAR, {"a", "bbb", "cdefg", nullptr}), Value::LIST(LogicalType::VARCHAR, {"h", "ij", "klm"}), nullptr, Value::LIST(LogicalType::VARCHAR, {}), Value::LIST(LogicalType::VARCHAR, {"", ""})})) == blob);
blob = Value::BLOB(R"'(e\x03\x08\x00\x00\x00\x04$\x00\x00\x00)\x00\x00\x002\x00\x00\x002\x00\x00\x009\x00\x00\x004\x01\x00\x009\x01\x00\x00H\x01\x00\x00l\x01\x00\x00\x0D\x01\x00\x00\x00\x19a string\x15\x09\x08\xA1\xB0\xB9\x12d \x00\x00\x00)\x00\x00\x004\x00\x00\x00@\x00\x00\x00I\x00\x00\x00[\x00\x00\x00p\x00\x00\x00\x83\x00\x00\x00\x04\x00\x00\x00bool\x0A\x06\x00\x00\x00string\x19\x06\x00\x00\x00a liste\x0B\x04\x00\x00\x00null\x01\x0C\x00\x00\x00another liste\x19\x0C\x00\x00\x00empty_nestedd\x00\x00\x00\x00\x0E\x00\x00\x00bool or string\x03\x06\x00\x00\x00nestedd\x08\x00\x00\x00\x13\x00\x00\x00\x06\x00\x00\x00child1\x0D\x06\x00\x00\x00child2\x19\x08$\x00\x00\x00%\x00\x00\x00*\x00\x00\x002\x00\x00\x002\x00\x00\x002\x00\x00\x002\x00\x00\x004\x00\x00\x00M\x00\x00\x00\x01hello\x03\x00\x00\x00\x02\x00\x00\x0A\x01\x00\x0C\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00{\x00\x00\x00a stringd\x00\x00\x00\x00e\x0C\x04\x00\x00\x00\x08\x01\x00\x02\x00\x03\x00\x00\x00e\x19\x04\x00\x00\x00\x08\x14\x00\x00\x00\x15\x00\x00\x00\x18\x00\x00\x00\x1D\x00\x00\x00\x1D\x00\x00\x00abbbcdefg)'");
REQUIRE(Variant(any_list) == blob);
blob = Value::BLOB(R"'(ed\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::EMPTYLIST(LogicalType::STRUCT({}))) == blob);
blob = Value::BLOB(R"'(ed\x00\x00\x00\x00\x03\x00\x00\x00\x02\x10\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00)'");
REQUIRE(Variant(Value::LIST(LogicalType::STRUCT({}), {Value::STRUCT({}), nullptr, Value::STRUCT({})})) == blob);
blob = Value::BLOB(R"'(ed \x00\x00\x00)\x00\x00\x004\x00\x00\x00@\x00\x00\x00I\x00\x00\x00[\x00\x00\x00p\x00\x00\x00\x83\x00\x00\x00\x04\x00\x00\x00bool\x0A\x06\x00\x00\x00string\x19\x06\x00\x00\x00a liste\x0B\x04\x00\x00\x00null\x01\x0C\x00\x00\x00another liste\x19\x0C\x00\x00\x00empty_nestedd\x00\x00\x00\x00\x0E\x00\x00\x00bool or string\x03\x06\x00\x00\x00nestedd\x08\x00\x00\x00\x13\x00\x00\x00\x06\x00\x00\x00child1\x0D\x06\x00\x00\x00child2\x19)'");
REQUIRE(Variant(Value::EMPTYLIST(st.type())) == blob);
blob = Value::BLOB(R"'(ed \x00\x00\x00)\x00\x00\x004\x00\x00\x00@\x00\x00\x00I\x00\x00\x00[\x00\x00\x00p\x00\x00\x00\x83\x00\x00\x00\x04\x00\x00\x00bool\x0A\x06\x00\x00\x00string\x19\x06\x00\x00\x00a liste\x0B\x04\x00\x00\x00null\x01\x0C\x00\x00\x00another liste\x19\x0C\x00\x00\x00empty_nestedd\x00\x00\x00\x00\x0E\x00\x00\x00bool or string\x03\x06\x00\x00\x00nestedd\x08\x00\x00\x00\x13\x00\x00\x00\x06\x00\x00\x00child1\x0D\x06\x00\x00\x00child2\x19\x04\x00\x00\x00\x02\x14\x00\x00\x00b\x00\x00\x00b\x00\x00\x00\x87\x00\x00\x00\xF5\x00\x00\x00\x08$\x00\x00\x00%\x00\x00\x00*\x00\x00\x002\x00\x00\x002\x00\x00\x002\x00\x00\x002\x00\x00\x004\x00\x00\x00M\x00\x00\x00\x01hello\x03\x00\x00\x00\x02\x00\x00\x0A\x01\x00\x0C\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00{\x00\x00\x00a string\xFF$\x00\x00\x00$\x00\x00\x00$\x00\x00\x00$\x00\x00\x00$\x00\x00\x00$\x00\x00\x00$\x00\x00\x00$\x00\x00\x00$\x00\x00\x00\x08$\x00\x00\x00%\x00\x00\x00,\x00\x00\x00,\x00\x00\x00,\x00\x00\x00C\x00\x00\x00C\x00\x00\x00O\x00\x00\x00m\x00\x00\x00\x00goodbye\x02\x00\x00\x00\x00\x0C\x00\x00\x00\x0F\x00\x00\x00\x12\x00\x00\x00onetwo\x19not boolean\x00\x0C\x00\x00\x00\x10\x00\x00\x00\x1D\x00\x00\x00\xC8\x01\x00\x00also a string)'");
REQUIRE(Variant(Value::LIST(st.type(), {st, Value(st.type()), st_null, st2})) == blob);
blob = Value::BLOB(R"'(d\x00\x00\x00\x00)'");
REQUIRE(Variant(Value::STRUCT({})) == blob);
blob = Value::BLOB(R"'(d \x00\x00\x00)\x00\x00\x004\x00\x00\x00@\x00\x00\x00I\x00\x00\x00[\x00\x00\x00p\x00\x00\x00\x83\x00\x00\x00\x04\x00\x00\x00bool\x0A\x06\x00\x00\x00string\x19\x06\x00\x00\x00a liste\x0B\x04\x00\x00\x00null\x01\x0C\x00\x00\x00another liste\x19\x0C\x00\x00\x00empty_nestedd\x00\x00\x00\x00\x0E\x00\x00\x00bool or string\x03\x06\x00\x00\x00nestedd\x08\x00\x00\x00\x13\x00\x00\x00\x06\x00\x00\x00child1\x0D\x06\x00\x00\x00child2\x19\x08$\x00\x00\x00%\x00\x00\x00*\x00\x00\x002\x00\x00\x002\x00\x00\x002\x00\x00\x002\x00\x00\x004\x00\x00\x00M\x00\x00\x00\x01hello\x03\x00\x00\x00\x02\x00\x00\x0A\x01\x00\x0C\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00{\x00\x00\x00a string)'");
REQUIRE(Variant(st) == blob);
blob = Value::BLOB(R"'(f\x08\x00\x00\x00\x11\x00\x00\x00\x03\x00\x00\x00keye\x19\x05\x00\x00\x00valuee\x0D\x00\x0C\x00\x00\x00%\x00\x00\x002\x00\x00\x00\x02\x00\x00\x00\x00\x0C\x00\x00\x00\x10\x00\x00\x00\x14\x00\x00\x00key1key2\x02\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00)'");
REQUIRE(Variant(Value::MAP(Value::LIST({"key1", "key2"}), Value::LIST({1, 2}))) == blob);
